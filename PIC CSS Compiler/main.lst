CCS PCM C Compiler, Version 5.015, 5967               29-mar.-21 17:32

               Filename:   F:\Universidad\PIC CSS COMPILER AND PROTEUS\Programacion Y control de perifericos\Proyecto numero  (25)\PIC CSS Compiler\main.lst

               ROM used:   453 words (11%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           28 (7%) worst case
               Stack used: 5 locations
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   155
0002:  NOP
.................... #include <main.h> 
.................... #include <16F1827.h> 
.................... //////////// Standard Header file for the PIC16F1827 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1827 
0003:  DATA 0C,00
0004:  DATA CD,37
0005:  DATA F4,37
0006:  DATA 72,10
0007:  DATA 65,37
0008:  DATA E3,32
0009:  DATA 6E,32
000A:  DATA 69,32
000B:  DATA 6F,00
000C:  DATA C4,32
000D:  DATA F2,32
000E:  DATA 63,34
000F:  DATA 61,00
0010:  DATA CD,37
0011:  DATA F4,37
0012:  DATA 72,10
0013:  DATA 65,37
0014:  DATA E3,32
0015:  DATA 6E,32
0016:  DATA 69,32
0017:  DATA 6F,00
0018:  DATA 49,3D
0019:  DATA F1,3A
001A:  DATA E9,32
001B:  DATA 72,32
001C:  DATA 61,00
001D:  DATA 0C,10
001E:  DATA CD,37
001F:  DATA F4,37
0020:  DATA 72,10
0021:  DATA 61,38
0022:  DATA E1,33
0023:  DATA 61,32
0024:  DATA 6F,00
*
010B:  MOVF   0B,W
010C:  BCF    0B.7
010D:  MOVLB  03
010E:  BSF    15.7
010F:  BSF    15.0
0110:  NOP
0111:  NOP
0112:  BTFSC  09.7
0113:  BSF    0B.7
0114:  MOVF   13,W
0115:  ANDLW  7F
0116:  BTFSC  03.2
0117:  GOTO   153
0118:  MOVLB  00
0119:  MOVWF  21
011A:  MOVLB  03
011B:  MOVF   11,W
011C:  MOVLB  00
011D:  MOVWF  22
011E:  MOVLB  03
011F:  MOVF   12,W
0120:  MOVLB  00
0121:  MOVWF  23
0122:  MOVF   21,W
0123:  MOVWF  24
0124:  CALL   0DF
0125:  MOVF   22,W
0126:  MOVLB  03
0127:  MOVWF  11
0128:  MOVLB  00
0129:  MOVF   23,W
012A:  MOVLB  03
012B:  MOVWF  12
012C:  MOVF   0B,W
012D:  BCF    0B.7
012E:  BSF    15.7
012F:  BSF    15.0
0130:  NOP
0131:  NOP
0132:  BTFSC  09.7
0133:  BSF    0B.7
0134:  RLF    13,W
0135:  RLF    14,W
0136:  ANDLW  7F
0137:  BTFSC  03.2
0138:  GOTO   153
0139:  MOVLB  00
013A:  MOVWF  21
013B:  MOVLB  03
013C:  MOVF   11,W
013D:  MOVLB  00
013E:  MOVWF  22
013F:  MOVLB  03
0140:  MOVF   12,W
0141:  MOVLB  00
0142:  MOVWF  23
0143:  MOVF   21,W
0144:  MOVWF  24
0145:  CALL   0DF
0146:  MOVF   22,W
0147:  MOVLB  03
0148:  MOVWF  11
0149:  MOVLB  00
014A:  MOVF   23,W
014B:  MOVLB  03
014C:  MOVWF  12
014D:  INCF   11,F
014E:  BTFSC  03.2
014F:  INCF   12,F
0150:  MOVLB  00
0151:  GOTO   10B
0152:  MOVLB  03
0153:  MOVLB  00
0154:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
....................  
.................... #use delay(crystal=4MHz) 
*
0025:  MOVLW  20
0026:  MOVWF  05
0027:  MOVLW  06
0028:  MOVWF  04
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   03A
002C:  MOVLW  01
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  4A
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  GOTO   038
0038:  DECFSZ 00,F
0039:  GOTO   02C
003A:  RETURN
....................  
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0053:  MOVLW  0F
0054:  MOVLB  01
0055:  ANDWF  0D,W
0056:  IORLW  F0
0057:  MOVWF  0D
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0058:  MOVLB  00
0059:  BSF    0D.2
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_enable(1); 
005B:  BSF    0D.0
....................    delay_cycles(1); 
005C:  NOP
....................    high = lcd_read_nibble(); 
005D:  CALL   047
005E:  MOVF   78,W
005F:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
0060:  BCF    0D.0
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    0D.0
....................    delay_us(1); 
0063:  NOP
....................    low = lcd_read_nibble(); 
0064:  CALL   047
0065:  MOVF   78,W
0066:  MOVWF  2B
....................        
....................    lcd_output_enable(0); 
0067:  BCF    0D.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0068:  MOVLW  0F
0069:  MOVLB  01
006A:  ANDWF  0D,W
006B:  MOVWF  0D
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
006C:  MOVLB  00
006D:  SWAPF  2C,W
006E:  MOVWF  77
006F:  MOVLW  F0
0070:  ANDWF  77,F
0071:  MOVF   77,W
0072:  IORWF  2B,W
0073:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0047:  MOVF   0D,W
0048:  MOVWF  77
0049:  SWAPF  0D,W
004A:  ANDLW  0F
004B:  MOVWF  78
....................   #endif 
004C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003B:  SWAPF  2C,W
003C:  ANDLW  F0
003D:  MOVWF  77
003E:  MOVLW  0F
003F:  ANDWF  0D,W
0040:  IORWF  77,W
0041:  MOVWF  0D
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    0D.0
....................    delay_us(2); 
0044:  GOTO   045
....................    lcd_output_enable(0); 
0045:  BCF    0D.0
0046:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
004D:  MOVLB  01
004E:  BCF    0D.0
....................    lcd_rs_tris(); 
004F:  BCF    0D.1
....................    lcd_rw_tris(); 
0050:  BCF    0D.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0051:  MOVLB  00
0052:  BCF    0D.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0074:  MOVF   78,W
0075:  MOVWF  2B
0076:  BTFSC  2B.7
0077:  GOTO   053
....................    lcd_output_rs(address); 
0078:  BTFSS  29.0
0079:  BCF    0D.1
007A:  BTFSC  29.0
007B:  BSF    0D.1
....................    delay_cycles(1); 
007C:  NOP
....................    lcd_output_rw(0); 
007D:  BCF    0D.2
....................    delay_cycles(1); 
007E:  NOP
....................    lcd_output_enable(0); 
007F:  BCF    0D.0
....................    lcd_send_nibble(n >> 4); 
0080:  SWAPF  2A,W
0081:  MOVWF  2B
0082:  MOVLW  0F
0083:  ANDWF  2B,F
0084:  MOVF   2B,W
0085:  MOVWF  2C
0086:  CALL   03B
....................    lcd_send_nibble(n & 0xf); 
0087:  MOVF   2A,W
0088:  ANDLW  0F
0089:  MOVWF  2B
008A:  MOVWF  2C
008B:  CALL   03B
008C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
008D:  MOVLW  28
008E:  MOVWF  22
008F:  MOVLW  0C
0090:  MOVWF  23
0091:  MOVLW  01
0092:  MOVWF  24
0093:  MOVLW  06
0094:  MOVWF  25
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0095:  BCF    0D.0
....................    lcd_output_rs(0); 
0096:  BCF    0D.1
....................    lcd_output_rw(0); 
0097:  BCF    0D.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0098:  MOVLW  0F
0099:  MOVLB  01
009A:  ANDWF  0D,W
009B:  MOVWF  0D
....................   #endif 
....................    lcd_enable_tris(); 
009C:  BCF    0D.0
....................    lcd_rs_tris(); 
009D:  BCF    0D.1
....................    lcd_rw_tris(); 
009E:  BCF    0D.2
....................  #endif 
....................      
....................    delay_ms(15); 
009F:  MOVLW  0F
00A0:  MOVLB  00
00A1:  MOVWF  26
00A2:  CALL   025
....................    for(i=1;i<=3;++i) 
00A3:  MOVLW  01
00A4:  MOVWF  21
00A5:  MOVF   21,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B1
....................    { 
....................        lcd_send_nibble(3); 
00A9:  MOVLW  03
00AA:  MOVWF  2C
00AB:  CALL   03B
....................        delay_ms(5); 
00AC:  MOVLW  05
00AD:  MOVWF  26
00AE:  CALL   025
00AF:  INCF   21,F
00B0:  GOTO   0A5
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B1:  MOVLW  02
00B2:  MOVWF  2C
00B3:  CALL   03B
....................    delay_ms(5); 
00B4:  MOVLW  05
00B5:  MOVWF  26
00B6:  CALL   025
....................    for(i=0;i<=3;++i) 
00B7:  CLRF   21
00B8:  MOVF   21,W
00B9:  SUBLW  03
00BA:  BTFSS  03.0
00BB:  GOTO   0CB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00BC:  MOVLW  02
00BD:  ADDWF  21,W
00BE:  MOVWF  04
00BF:  MOVLW  20
00C0:  MOVWF  05
00C1:  BTFSC  03.0
00C2:  INCF   05,F
00C3:  MOVF   00,W
00C4:  MOVWF  26
00C5:  CLRF   29
00C6:  MOVF   26,W
00C7:  MOVWF  2A
00C8:  CALL   04D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C9:  INCF   21,F
00CA:  GOTO   0B8
00CB:  MOVLP  00
00CC:  GOTO   161 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CD:  DECFSZ 26,W
00CE:  GOTO   0D0
00CF:  GOTO   0D3
....................       address=LCD_LINE_TWO; 
00D0:  MOVLW  40
00D1:  MOVWF  27
00D2:  GOTO   0D4
....................    else 
....................       address=0; 
00D3:  CLRF   27
....................       
....................    address+=x-1; 
00D4:  MOVLW  01
00D5:  SUBWF  25,W
00D6:  ADDWF  27,F
....................    lcd_send_byte(0,0x80|address); 
00D7:  MOVF   27,W
00D8:  IORLW  80
00D9:  MOVWF  28
00DA:  CLRF   29
00DB:  MOVF   28,W
00DC:  MOVWF  2A
00DD:  CALL   04D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00DF:  MOVF   24,W
00E0:  XORLW  07
00E1:  BTFSC  03.2
00E2:  GOTO   0ED
00E3:  XORLW  0B
00E4:  BTFSC  03.2
00E5:  GOTO   0F2
00E6:  XORLW  06
00E7:  BTFSC  03.2
00E8:  GOTO   0FA
00E9:  XORLW  02
00EA:  BTFSC  03.2
00EB:  GOTO   100
00EC:  GOTO   105
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  25
00EF:  MOVWF  26
00F0:  CALL   0CD
00F1:  GOTO   10A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F2:  CLRF   29
00F3:  MOVLW  01
00F4:  MOVWF  2A
00F5:  CALL   04D
....................                      delay_ms(2); 
00F6:  MOVLW  02
00F7:  MOVWF  26
00F8:  CALL   025
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F9:  GOTO   10A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FA:  MOVLW  01
00FB:  MOVWF  25
00FC:  MOVLW  02
00FD:  MOVWF  26
00FE:  CALL   0CD
00FF:  GOTO   10A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0100:  CLRF   29
0101:  MOVLW  10
0102:  MOVWF  2A
0103:  CALL   04D
0104:  GOTO   10A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0105:  MOVLW  01
0106:  MOVWF  29
0107:  MOVF   24,W
0108:  MOVWF  2A
0109:  CALL   04D
....................      #endif 
....................    } 
010A:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use standard_io(a) 
.................... #define USE_PORTB_LCD TRUE 
.................... void main(){ 
*
0155:  MOVLB  03
0156:  CLRF   0C
0157:  CLRF   0D
0158:  MOVLB  02
0159:  CLRF   12
015A:  CLRF   11
015B:  CLRF   14
015C:  CLRF   13
....................    SET_TRIS_A(0b00000011); 
015D:  MOVLW  03
015E:  TRIS   5
....................    LCD_INIT(); 
015F:  MOVLB  00
0160:  GOTO   08D
....................    LCD_PUTC("\f"); 
0161:  MOVLW  03
0162:  MOVLB  03
0163:  MOVWF  11
0164:  MOVLW  00
0165:  MOVWF  12
0166:  MOVLB  00
0167:  CALL   10B
....................    output_high(PIN_A4); 
0168:  MOVLB  01
0169:  BCF    0C.4
016A:  MOVLB  02
016B:  BSF    0C.4
....................    while(TRUE){      
....................       if (input_state(PIN_A0)==1){ 
016C:  MOVLB  00
016D:  BTFSS  0C.0
016E:  GOTO   18C
....................          lcd_gotoxy(1,1); 
016F:  MOVLW  01
0170:  MOVWF  25
0171:  MOVWF  26
0172:  CALL   0CD
....................          printf(lcd_putc, "Motor encendido"); 
0173:  MOVLW  04
0174:  MOVLB  03
0175:  MOVWF  11
0176:  MOVLW  00
0177:  MOVWF  12
0178:  MOVLB  00
0179:  CALL   10B
....................          lcd_gotoxy(1,2); 
017A:  MOVLW  01
017B:  MOVWF  25
017C:  MOVLW  02
017D:  MOVWF  26
017E:  CALL   0CD
....................          printf(lcd_putc, "Derecha"); 
017F:  MOVLW  0C
0180:  MOVLB  03
0181:  MOVWF  11
0182:  MOVLW  00
0183:  MOVWF  12
0184:  MOVLB  00
0185:  CALL   10B
....................          output_high(PIN_A2); 
0186:  MOVLB  01
0187:  BCF    0C.2
0188:  MOVLB  02
0189:  BSF    0C.2
....................       } 
018A:  GOTO   1C3
018B:  MOVLB  00
....................       else if (input_state(PIN_A1)==1){ 
018C:  BTFSS  0C.1
018D:  GOTO   1AB
....................          lcd_gotoxy(1,1); 
018E:  MOVLW  01
018F:  MOVWF  25
0190:  MOVWF  26
0191:  CALL   0CD
....................          printf(lcd_putc, "Motor encendido"); 
0192:  MOVLW  10
0193:  MOVLB  03
0194:  MOVWF  11
0195:  MOVLW  00
0196:  MOVWF  12
0197:  MOVLB  00
0198:  CALL   10B
....................          lcd_gotoxy(1,2); 
0199:  MOVLW  01
019A:  MOVWF  25
019B:  MOVLW  02
019C:  MOVWF  26
019D:  CALL   0CD
....................          printf(lcd_putc, "Izquierda"); 
019E:  MOVLW  18
019F:  MOVLB  03
01A0:  MOVWF  11
01A1:  MOVLW  00
01A2:  MOVWF  12
01A3:  MOVLB  00
01A4:  CALL   10B
....................          output_high(PIN_A3); 
01A5:  MOVLB  01
01A6:  BCF    0C.3
01A7:  MOVLB  02
01A8:  BSF    0C.3
....................       }  
01A9:  GOTO   1C3
01AA:  MOVLB  00
....................       else{ 
....................          lcd_gotoxy(1,1); 
01AB:  MOVLW  01
01AC:  MOVWF  25
01AD:  MOVWF  26
01AE:  CALL   0CD
....................          printf(lcd_putc, "\f Motor apagado"); 
01AF:  MOVLW  1D
01B0:  MOVLB  03
01B1:  MOVWF  11
01B2:  MOVLW  00
01B3:  MOVWF  12
01B4:  MOVLB  00
01B5:  CALL   10B
....................          output_low(PIN_A2); 
01B6:  MOVLB  01
01B7:  BCF    0C.2
01B8:  MOVLB  02
01B9:  BCF    0C.2
....................          output_low(PIN_A3); 
01BA:  MOVLB  01
01BB:  BCF    0C.3
01BC:  MOVLB  02
01BD:  BCF    0C.3
....................          delay_ms(100); 
01BE:  MOVLW  64
01BF:  MOVLB  00
01C0:  MOVWF  26
01C1:  CALL   025
01C2:  MOVLB  02
....................       }   
01C3:  GOTO   16C
....................    } 
.................... } 
01C4:  SLEEP

Configuration Fuses:
   Word  1: 3FC1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
